/**
 * ПРИНЦИПЫ SOLID - OOP PRINCIPLES
 *
 * S: Принцип единственной ответственности (Single Responsibility Principle).
 * Каждый класс должен решать лишь одну задачу, только одну.
 * 
 * O: Open-Closed Principle (Принцип открытости-закрытости).
 * Программные сущности (классы, модули, ф-ции) должны быть открыты для расширения, но закрыты для модификации. 
 *
 * L: Liskov Substitution Principle (Принцип подстановки Барбары Лисков).
 * Необходимо, чтобы подклассы могли бы служить заменой для своих суперклассов.
 * Сущность, использующая объект, который реализует определенный интерфейс, должна иметь возможность использовать 
 * другой объект c тем же "интерфейсом", даже не зная о факте подмены. То есть программируем к интерфейсу,
 * а не к его конкретной реализации.  
 *
 * I: Interface Segregation Principle (Принцип разделения интерфейса).
 * Лучше иметь несколько интерфейсов с небольшим числом методов чем один - с большим
 * Клиентский код не должен зависеть от методов, которые он не использует.
 * То есть нужно избегать интерфейсов, имеющих много методов - не все из них будут востребованы клиентами.
 * Лучше иметь несколько интерфесов, с небольшим числом методов, чем один - с большим.
 *
 * D: Dependency Inversion Principle (Принцип инверсии зависимостей).
 * Объектом зависимости должна быть абстракция, а не что-то конкретное. 
 * В общем, класс не должен иметь жестко прописанных в нем зависимостей от объектов других классов, 
 * например, через оператор new. Вместо этого зависимости должны быть вынесенны из класса,
 * чтобы уменьшить степень связанности кода.
 * Этот принцип реализуется несколькими способами - самый популярный Внедрение Зависимости (Dependency Injection)
 */ 
